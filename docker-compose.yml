version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    platform: linux/amd64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    platform: linux/amd64
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-net

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - postgres
      - airflow-init
      - kafka
    ports:
      - "8080:8080"
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
     #AIRFLOW__CORE__FERNET_KEY: ''
      #AIRFLOW__WEBSERVER__SECRET_KEY: ''
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: 8793
    volumes:
      - ./:/opt/Weather_ML
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./snowflake_utils:/opt/Weather_ML/snowflake_utils
      - ./data:/opt/Weather_ML/data
      - ./dbt:/opt/dbt
      - ~/.dbt:/home/airflow/.dbt
      - ./keys:/opt/airflow/keys
      - ./.env:/opt/airflow/.env
      - ./airflow/.env:/opt/airflow/.env
      - ./encrypted_key:/opt/encrypted_key
      - ./training_weather_model:/opt/airflow/training_weather_model
    user: "${AIRFLOW_UID:-50000}:0"
    command: airflow webserver

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - postgres
      - kafka
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      #AIRFLOW__CORE__FERNET_KEY: 'your_fernet_key_here'
      AIRFLOW__LOGGING__BASE_LOG_FOLDER: /opt/airflow/logs
      AIRFLOW__LOGGING__WORKER_LOG_SERVER_PORT: 8793
    volumes:
      - ./:/opt/Weather_ML
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./snowflake_utils:/opt/Weather_ML/snowflake_utils
      - ./data:/opt/Weather_ML/data
      - ./dbt:/opt/dbt
      - ~/.dbt:/home/airflow/.dbt
      - ./keys:/opt/airflow/keys
      - ./airflow/.env:/opt/airflow/.env
      - ./encrypted_key:/opt/encrypted_key
      - ./.env:/opt/airflow/.env
      - ./training_weather_model:/opt/airflow/training_weather_model
    user: "${AIRFLOW_UID:-50000}:0"
    command: airflow scheduler

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      # AIRFLOW__CORE__FERNET_KEY: 'your_fernet_key_here'
    volumes:
      - ./:/opt/Weather_ML
      - ./:/opt/airflow
      - ./dbt:/opt/dbt
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./snowflake_utils:/opt/Weather_ML/snowflake_utils
      - ./encrypted_key:/opt/encrypted_key
      - ./.env:/opt/airflow/.env
      - ./training_weather_model:/opt/airflow/training_weather_model
    entrypoint: >
      bash -c "airflow db init && airflow users create --username admin --firstname Airflow --lastname Admin --role Admin --email admin@example.com --password admin"

  dbt:
    build:
      context: .
      dockerfile: Dockerfile.dbt
    volumes:
      - ./dbt:/usr/app/dbt
      - ./dbt/profiles/profiles.yml:/root/.dbt/profiles.yml
    working_dir: /usr/app/dbt
    entrypoint: ["sleep", "infinity"]

  api-producer:
    build:
      context: .
      dockerfile: Dockerfile.api
    volumes:
      - ./kafka:/app/kafka
    working_dir: /app/kafka/producers
    entrypoint: ["/app/wait-for-it.sh", "kafka:9092", "--timeout=60", "--", "python", "api_weather_producer.py"]
    environment:
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
    networks:
      - kafka-net

  api-consumer:
    build:
      context: .
      dockerfile: Dockerfile.api
    volumes:
      - ./kafka:/app/kafka
    working_dir: /app/kafka/consumers
    entrypoint: ["/app/wait-for-it.sh", "kafka:9092", "--timeout=60", "--", "python", "api_weather_consumer.py"]
    environment:
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_SCHEMA_RAW_DATA=${SNOWFLAKE_SCHEMA_RAW_DATA}
      - KAFKA_BROKER=kafka:9092
    depends_on:
      - kafka
    networks:
      - kafka-net

  akhq:
    image: tchiotludo/akhq:0.24.0
    depends_on:
      - kafka
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            my-cluster:
              properties:
                bootstrap.servers: "kafka:9092"
    ports:
      - "8081:8080"
    networks:
      - kafka-net



volumes:
  postgres_data:

networks:
  kafka-net: