name: dbt CI

on:
  pull_request:
    branches: [ main, dev ]

jobs:
  dbt-test:
    runs-on: ubuntu-latest

    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
      SNOWFLAKE_ROLE: "USER_DBT_ROLE"
      SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      SNOWFLAKE_CI_USER: ${{ secrets.SNOWFLAKE_CI_USER }}
      SNOWFLAKE_CI_USER_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_CI_USER_PRIVATE_KEY }}
      SNOWFLAKE_CI_USER_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SNOWFLAKE_CI_USER_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_CI_USER_PASSWORD: ${{ secrets.SNOWFLAKE_CI_USER_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Set up uv virtualenv
        run: uv venv

      - name: Install Python deps
        run: uv pip install -r pyproject.toml

      - name: Install dbt & sqlfluff
        run: |
          uv pip install dbt-core dbt-snowflake sqlfluff
          uv pip install sqlfluff-templater-dbt

      - name: set up profiles.yml
        run: |
            mkdir -p ~/.dbt
            pwd
            cp .dbt/profiles-cicd.yml ~/.dbt/profiles.yml
            ls -la ~/.dbt
        working-directory: dbt

      - name: Run pylint
        run: uv run pylint . --fail-under=8.0

      - name: Install dbt packages
        run: uv run dbt deps --target ci
        working-directory: dbt

      - name: Lint SQL files
        run: uv run sqlfluff lint .
        working-directory: dbt

      - name: Clean DBT Artifacts
        run: uv run dbt clean --target ci
        working-directory: dbt

      - name: Debug environment variables
        run: |
          echo "Checking environment variables..."
          echo "SNOWFLAKE_CI_USER: ${SNOWFLAKE_CI_USER}"
          echo "SNOWFLAKE_CI_USER_PRIVATE_KEY length: ${#SNOWFLAKE_CI_USER_PRIVATE_KEY}"
          echo "SNOWFLAKE_CI_USER_PRIVATE_KEY_PASSPHRASE length: ${#SNOWFLAKE_CI_USER_PRIVATE_KEY_PASSPHRASE}"
          echo "Private key starts with: ${SNOWFLAKE_CI_USER_PRIVATE_KEY:0:50}..."
          echo "Private key ends with: ...${SNOWFLAKE_CI_USER_PRIVATE_KEY: -50}"
        working-directory: dbt

      - name: Validate private key format
        run: |
          echo "Validating private key format..."
          if [[ "${SNOWFLAKE_CI_USER_PRIVATE_KEY}" == *"-----BEGIN PRIVATE KEY-----"* ]]; then
            echo "Private key format looks correct (PKCS#8)"
          elif [[ "${SNOWFLAKE_CI_USER_PRIVATE_KEY}" == *"-----BEGIN RSA PRIVATE KEY-----"* ]]; then
            echo "Private key format looks correct (RSA)"
          else
            echo "WARNING: Private key format may be incorrect"
            echo "Expected to contain '-----BEGIN PRIVATE KEY-----' or '-----BEGIN RSA PRIVATE KEY-----'"
          fi
        working-directory: dbt

      - name: Test Snowflake connection
        run: uv run dbt debug --target ci
        working-directory: dbt

      - name: Test Snowflake connection with password (fallback)
        if: failure()
        run: uv run dbt debug --target ci_password
        working-directory: dbt

      - name: compile dbt models
        run: uv run dbt compile --target ci
        working-directory: dbt

      - name: compile dbt models with password (fallback)
        if: failure()
        run: uv run dbt compile --target ci_password
        working-directory: dbt

      - name: Run dbt build
        run: uv run dbt build --target ci
        working-directory: dbt

      - name: Run dbt build with password (fallback)
        if: failure()
        run: uv run dbt build --target ci_password
        working-directory: dbt

